"use strict";
var _Blueprint_tx, _Blueprint_deploy;
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendBlueprint = exports.Blueprint = exports.BlueprintSubmittableResult = void 0;
const tslib_1 = require("tslib");
const api_1 = require("@polkadot/api");
const util_1 = require("@polkadot/util");
const util_js_1 = require("../util.js");
const Base_js_1 = require("./Base.js");
const Contract_js_1 = require("./Contract.js");
const util_js_2 = require("./util.js");
class BlueprintSubmittableResult extends api_1.SubmittableResult {
    constructor(result, contract) {
        super(result);
        this.contract = contract;
    }
}
exports.BlueprintSubmittableResult = BlueprintSubmittableResult;
class Blueprint extends Base_js_1.Base {
    constructor(api, abi, codeHash, decorateMethod) {
        super(api, abi, decorateMethod);
        _Blueprint_tx.set(this, {});
        _Blueprint_deploy.set(this, (constructorOrId, { gasLimit = util_1.BN_ZERO, salt, storageDepositLimit = null, value = util_1.BN_ZERO }, params) => {
            return this.api.tx.contracts.instantiate(value, 
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore jiggle v1 weights, metadata points to latest
            this._isWeightV1
                ? (0, util_js_2.convertWeight)(gasLimit).v1Weight
                : (0, util_js_2.convertWeight)(gasLimit).v2Weight, storageDepositLimit, this.codeHash, this.abi.findConstructor(constructorOrId).toU8a(params), (0, util_js_2.encodeSalt)(salt)).withResultTransform((result) => new BlueprintSubmittableResult(result, (0, util_js_1.applyOnEvent)(result, ['Instantiated'], ([record]) => new Contract_js_1.Contract(this.api, this.abi, record.event.data[1], this._decorateMethod))));
        });
        this.codeHash = this.registry.createType('Hash', codeHash);
        this.abi.constructors.forEach((c) => {
            if ((0, util_1.isUndefined)(tslib_1.__classPrivateFieldGet(this, _Blueprint_tx, "f")[c.method])) {
                tslib_1.__classPrivateFieldGet(this, _Blueprint_tx, "f")[c.method] = (0, util_js_2.createBluePrintTx)(c, (o, p) => tslib_1.__classPrivateFieldGet(this, _Blueprint_deploy, "f").call(this, c, o, p));
            }
        });
    }
    get tx() {
        return tslib_1.__classPrivateFieldGet(this, _Blueprint_tx, "f");
    }
}
exports.Blueprint = Blueprint;
_Blueprint_tx = new WeakMap(), _Blueprint_deploy = new WeakMap();
function extendBlueprint(type, decorateMethod) {
    var _a;
    return _a = class extends Blueprint {
            constructor(api, abi, codeHash) {
                super(api, abi, codeHash, decorateMethod);
            }
        },
        _a.__BlueprintType = type,
        _a;
}
exports.extendBlueprint = extendBlueprint;
